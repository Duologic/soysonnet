local a = import 'github.com/crdsonnet/astsonnet/main.libsonnet';
local autils = import 'github.com/crdsonnet/astsonnet/utils.libsonnet';
local helpers = import 'github.com/crdsonnet/crdsonnet/crdsonnet/helpers.libsonnet';
local crdsonnet = import 'github.com/crdsonnet/crdsonnet/crdsonnet/main.libsonnet';
local d = import 'github.com/jsonnet-libs/docsonnet/doc-util/main.libsonnet';

local processor =
  crdsonnet.processor.new('ast')
  + {
    local engine = self.renderEngine.engine,
    rendera(name, schema):
      self.parse(name, schema),
    render(name, schema):
      local parsedSchema = self.parse(name, schema);
      local properties = parsedSchema[name].properties;
      local required = std.get(parsedSchema[name], 'required', []);
      autils.deepMergeObjects([
        a.object.new([
          a.field.new(
            a.id.new(name),
            a.object.new([
              a.field.new(
                a.string.new('#new'),
                a.literal.new(
                  std.manifestJsonEx(
                    d.func.new('', [
                      local p = properties[property];
                      local propertyType = p.type;
                      //if 'type' in p
                      //then p.type
                      //else
                      //  local t = helpers.getSchemaTypes(p);
                      //  if t == ['string'] then ['object'] else t;
                      d.argument.new(
                        property,
                        (propertyType),
                        std.get(p, 'default'),
                        std.get(p, 'enum'),
                      )
                      for property in required
                    ])
                    , '', ''
                  ),
                ),
              ),
              a.field_function.new(
                a.id.new('new'),

                local typeDefinitions =
                  a.object.new([
                    a.field.new(
                      a.id.new('_blockType'),
                      a.string.new('resource'),
                    )
                    + a.field.withHidden(),
                    a.field.new(
                      a.id.new('_resourceType'),
                      a.string.new(name),
                    )
                    + a.field.withHidden(),
                  ]);

                (if std.length(required) > 0
                 then
                   a.binary_sum.new(
                     [typeDefinitions]
                     + [
                       a.functioncall.new(
                         a.fieldaccess.new(
                           [a.id.new('self')],
                           a.id.new(engine.functionName(property)),
                         )
                       )
                       + a.functioncall.withArgs(
                         a.arg.new(a.id.new(property))
                       )
                       for property in required
                     ]
                   )
                 else typeDefinitions)
              )
              + a.field_function.withParams(
                a.params.new([
                  a.param.new(a.id.new(property))
                  for property in required
                ])
              ),
            ])
          ),
        ]),
        super.render(name, schema),
      ]),
  };

function(
  astschema=import '../schemas/resources/route53.json',
  packagedoc=d.package.newSub('route53', ''),
)
  local asts = [
    local schema = astschema['$defs'][field];
    crdsonnet.schema.render(field, schema, processor)
    for field in std.objectFields(astschema['$defs'])
  ];

  local docstring =
    a.object.new([
      a.field.new(
        a.string.new('#'),
        a.literal.new(
          std.manifestJsonEx(packagedoc, '  ', '\n'),
        ),
      ),
    ]);

  '// DO NOT EDIT: generated by generator/generate.jsonnet\n'
  + autils.deepMergeObjects([docstring] + asts).toString()
